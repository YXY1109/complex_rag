[project]
name = "complex-rag"
version = "0.1.0"
description = "Modern, high-performance, enterprise-grade RAG system with RAGFlow integration"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.12"
authors = [
    {name = "RAG Team", email = "team@example.com"},
]
keywords = ["rag", "llm", "retrieval", "enterprise", "async"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core Framework
    "fastapi>=0.115.0",
    "sanic>=23.0.0",
    "uvicorn[standard]>=0.30.0",

    # Async and Task Processing
    "trio>=0.25.0",
    "anyio>=4.0.0",

    # Database and Storage
    "sqlalchemy>=2.0.0",
    "pymysql>=1.1.0",
    "pymilvus>=2.5.0",
    "elasticsearch>=8.15.0",
    "redis>=5.0.0",
    "minio>=7.2.0",

    # AI/ML Frameworks
    "langchain>=0.3.0",
    "langchain-community>=0.3.0",
    "openai>=1.50.0",
    "anthropic>=0.40.0",
    "transformers>=4.40.0",
    "torch>=2.4.0",
    "sentence-transformers>=3.0.0",

    # Document Processing
    "pypdf2>=3.0.0",
    "python-docx>=1.1.0",
    "openpyxl>=3.1.0",
    "python-pptx>=1.0.0",
    "pillow>=10.0.0",
    "pytesseract>=0.3.0",

    # Data Processing
    "pandas>=2.2.0",
    "numpy>=1.26.0",
    "orjson>=3.10.0",
    "aiofiles>=24.0.0",
    "python-multipart>=0.0.20",

    # Utilities
    "loguru>=0.7.0",
    "python-dotenv>=1.1.0",
    "pydantic>=2.8.0",
    "pydantic-settings>=2.3.0",
    "httpx>=0.27.0",
    "tenacity>=8.4.0",
    "rich>=13.7.0",
    "typer>=0.12.0",

    # Memory and Context
    "mem0ai>=0.1.0",

    # Graph Processing
    "networkx>=3.2.0",

    # Text Processing
    "nltk>=3.9.0",
    "spacy>=3.8.0",
    "jieba>=0.42.0",
    "pypinyin>=0.54.0",

    # Search and Indexing
    "whoosh>=2.7.0",
    "bm25s>=0.2.0",
]

[project.optional-dependencies]
dev = [
    # Code Quality
    "black>=25.0.0",
    "isort>=6.0.0",
    "mypy>=1.15.0",
    "flake8>=7.1.0",
    "bandit>=1.7.0",
    "pre-commit>=4.2.0",

    # Testing
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "httpx>=0.27.0",  # for testing async endpoints

    # Documentation
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.26.0",

    # Development Tools
    "ipython>=8.24.0",
    "jupyter>=1.1.0",
    "ruff>=0.7.0",
]

test = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",
    "factory-boy>=3.3.0",
    "faker>=30.0.0",
]

docs = [
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.26.0",
    "mkdocs-mermaid2-plugin>=1.1.0",
]

production = [
    "gunicorn>=23.0.0",
    "prometheus-client>=0.20.0",
    "sentry-sdk[fastapi]>=2.13.0",
]

[project.urls]
Homepage = "https://github.com/example/complex-rag"
Documentation = "https://complex-rag.readthedocs.io"
Repository = "https://github.com/example/complex-rag.git"
Issues = "https://github.com/example/complex-rag/issues"

[project.scripts]
complex-rag = "complex_rag.cli:main"
rag-api = "complex_rag.api.main:run_server"
rag-service = "complex_rag.rag_service.app:run_server"

[tool.uv]
dev-dependencies = [
    "black>=25.0.0",
    "isort>=6.0.0",
    "mypy>=1.15.0",
    "flake8>=7.1.0",
    "bandit>=1.7.0",
    "pre-commit>=4.2.0",
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "ruff>=0.7.0",
    "ipython>=8.24.0",
]

[tool.uv.sources]

# Black - Code Formatter
[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | __pycache__
)/
'''

# isort - Import Sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["complex_rag"]
known_third_party = ["fastapi", "sanic", "sqlalchemy", "langchain", "pydantic"]
skip_glob = ["*/migrations/*"]

# MyPy - Type Checking
[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pymilvus.*",
    "elasticsearch.*",
    "minio.*",
    "mem0.*",
    "networkx.*",
    "nltk.*",
    "spacy.*",
    "jieba.*",
    "whoosh.*",
    "tesseract.*",
]
ignore_missing_imports = true

# Pytest - Testing Framework
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=complex_rag",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async",
]
asyncio_mode = "auto"

# Coverage
[tool.coverage.run]
source = ["complex_rag"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit - Security Linting
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

# Ruff - Fast Python Linter
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["E501", "B"]

[tool.ruff.isort]
known-first-party = ["complex_rag"]

# Hatch - Build System
[tool.hatch.build.targets.wheel]
# 使用根目录结构，无需特定包配置

[tool.hatch.envs.default]
dependencies = [
    "coverage[toml]>=6.5",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
    "- coverage combine",
    "coverage report",
]
cov-html = [
    "- coverage combine",
    "coverage html",
]