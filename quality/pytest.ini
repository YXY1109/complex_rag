[pytest]
# pytest configuration file

# Minimum pytest version
minversion = 8.0

# Add options
addopts =
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=complex_rag
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --durations=10
    --maxfail=10
    --color=yes

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test* *Tests
python_functions = test_*

# Test paths
testpaths = tests

# Markers
markers =
    unit: Unit tests (fast, no external dependencies)
    integration: Integration tests (require external services)
    slow: Slow tests (take more than 1 second)
    smoke: Smoke tests (critical functionality)
    regression: Regression tests
    performance: Performance tests
    security: Security tests
    api: API tests
    database: Database tests
    rag: RAG functionality tests
    document_parser: Document parser tests
    rag_service: RAG service tests
    infrastructure: Infrastructure tests
    asyncio: Tests that use asyncio
    requires_redis: Tests that require Redis
    requires_mysql: Tests that require MySQL
    requires_milvus: Tests that require Milvus
    requires_elasticsearch: Tests that require Elasticsearch
    requires_minio: Tests that require MinIO

# Filter warnings
filterwarnings =
    # Ignore deprecation warnings from dependencies
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    # Ignore specific warnings from known libraries
    ignore::UserWarning:langchain.*
    ignore::FutureWarning:transformers.*
    # Treat warnings as errors in tests
    error::UserWarning:complex_rag.*
    error::RuntimeWarning:complex_rag.*

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Console output settings
console_output_style = progress

# Test session configuration
usefixtures =
    setup_test_database
    cleanup_test_data

# Timeout configuration
timeout = 300
timeout_method = thread

# Parallel execution
addopts = -n auto  # Run tests in parallel

# asyncio configuration
asyncio_mode = auto

# Coverage configuration
[coverage:run]
source = complex_rag
omit =
    */tests/*
    */test_*
    */__pycache__/*
    */migrations/*
    */venv/*
    */env/*
    .venv/*
    setup.py

[coverage:report]
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    if self.debug:

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if __name__ == '__main__':
    if __name__ == "__main__":

    # Don't complain about abstract classes
    @abc.abstractmethod
    @abstractmethod

    # Don't complain about protocols
    class .*Protocol:

    # Type checking
    if TYPE_CHECKING:

precision = 2
show_missing = true
skip_covered = false

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml

# Mock configuration
[tool:pytest-mock]
mock_class = unittest.mock.MagicMock